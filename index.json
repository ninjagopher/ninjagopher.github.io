[{"content":"如果是 GNOME，有直接能用的 iBus 词库的话，可以导入词库直接使用， ibus-rime 似乎问题有点多，不建议使用；如果想折腾，可以考虑 Fcitx5\n安装 Fcitx5 使用系统内置的包管理器安装（dnf 是 Fedora 内置的包管理器）：\n# 安装命令 sudo dnf install fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-rime fcitx5-qt fcitx5-gtk # 卸载命令： sudo dnf remove \u0026#34;fcitx5*\u0026#34; 雾凇拼音 雾凇拼音——长期维护的简体词库\n# 创建文件夹（如果不存在） mkdir -p ~/.local/share/fcitx5/rime/ # 克隆雾凇拼音这个Rime配置到本地（我克隆到了 ~/Downloads/ 目录） git clone https://github.com/iDvel/rime-ice.git rime --depth 1 # 复制上面克隆到本地的文件夹内的所有文件到刚创建的文件夹 cp ~/Downloads/rime/* ~/.local/share/fcitx5/rime 选择输入方案 我使用小鹤双拼方案，如果你使用其他方案，也可以按需调整\n# 编辑default.yaml配置文件，把 schema: double_pinyin_flypy 这行移动到方案列表（schema_list）的最前面 vi ~/.local/share/fcitx5/rime/default.yaml 同样在 default.yaml 文件内，调整候选词个数：\npage_size: 9 关闭候选词拼音注释 默认候选词会有拼音注释，比如：你好[ni hao]，编辑 double_pinyin_flypy.schema.yaml（编辑哪个文件看你使用什么方案），注释下面这两行就可以关闭\nspelling_hints: 8 always_show_comments: true 然后打开 Fcitx5 Configuration 添加 Rime，调整字体大小为 16 或者更大，自带的英文可以删掉\n环境变量 编辑 ~/.bash_profile，添加下面的内容：\n# 注意第三行 @im=fcitx 不要用双引号包围 export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx export INPUT_METHOD=fcitx 重新加载配置 通过 Gnome Tweaks 设置开机启动，然后重新登录或者重启，最后打字测试 🔚\n参考 Fcitx5，RIME，rime-ice\n","permalink":"https://ninjagopher.github.io/posts/fcitx5-fedora/","summary":"在 Fedora Workspace 41 上安装 Fcitx5 输入法","title":"Fedora 安装 Fcitx5"},{"content":"之前一直用 Hexo 发博客，生成速度确实感人，最近研究了一下常见的几个静态网站生成器，最终选择了 Hugo，以下是 Hugo 博客搭建和通过 GitHub Pages + GitHub Actions （使用 Deploy key 而不是 PAT）实现自动部署的具体步骤\n前置条件 🔧 Git，GitHub 账户，VS Code（用来编辑）\n本地部署 这里在 Fedora Linux 上做本地部署，其他操作系统上的步骤大同小异\n▶️ 首先使用内置的包管理器搜索 hugo 查看是否是最新版本（dnf 是 Fedora 内置的包管理器），是则通过dnf install hugo命令安装，否则到 GitHub 下载最新版本 hugo\ndnf info hugo # 或者：dnf repoquery hugo 由于 dnf 搜索到的不是最新的版本，所以我在 GitHub 下载，又因为后面会通过 GitHub Pages 部署，所以选择文件名不带 “withdeploy” 的版本，通过命令解压：\ntar -xzvf hugo_extended_x.xxx.x_linux-amd64.tar.gz 解压后把 hugo 这个文件移动到 /usr/local/bin 目录：\nsudo mv hugo /usr/local/bin 查看 Hugo 版本：\nhugo version 创建、进入博客文件夹：\nhugo new site \u0026lt;hugo-blog\u0026gt; # 注意替换名字 cd \u0026lt;hugo-blog\u0026gt; 初始化仓库：\ngit init 通过 touch .gitignore 命令新建 .gitignore 文件，复制下面的内容添加进去（用来忽略不必要的文件和文件夹）：\n/public resources/_gen/ .hugo_build.lock # Compiled Object files, Static and Dynamic libs (Shared Objects) *.o *.a *.so # Folders _obj _test # Architecture specific extensions/prefixes *.[568vq] [568vq].out *.cgo1.go *.cgo2.c _cgo_defun.c _cgo_gotypes.go _cgo_export.* _testmain.go *.exe *.test .DS_Store 在 Hugo Themes 找自己喜欢的主题，以 PaperMod 为例，它支持多种安装方式，这里通过 submodule 的方式安装：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --init --recursive # update git submodule update --remote --merge 应用主题：\necho \u0026#34;theme = \u0026#39;PaperMod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 新建一篇文章：\nhugo new content ./content/posts/my-first-post.md 启动本地服务器（新建的文章默认是草稿，-D参数表示构建草稿内容）：\nhugo server -D 部署到 GitHub Pages 📦 创建一个 Public 仓库，仓库名为 \u0026lt;username\u0026gt;.github.io，创建的时候添加一个 README.md 文件（也可以创建好之后添加，总之不是空仓库就行，否则会影响后面的工作流），然后把本地博客目录的 hugo.toml 这个配置文件的 baseURL 这行后面的链接改为 https://username.github.io/（注意替换 username）\n📦 再创建一个 Private 仓库，用来保存博客源码，不需要添加任何文件，名字自己起\n🔑 生成一个 rsa 类型的 SHH 密钥对，用于连接远程仓库：\n# 可以先创建.ssh文件夹并进入到这个文件夹 mkdir ~/.ssh \u0026amp;\u0026amp; cd ~/.ssh ssh-keygen -t rsa -b 4096 -C \u0026lt;username@example.com\u0026gt; ➡️ 复制 .pub 的内容，来到 GitHub，点击头像，点 Settings \u0026gt; SSH and GPG Keys \u0026gt; New SSH key，填写 Title，Key type 保持默认 Authenticaiton Key，粘贴到 Key 的区域，点击Add SSH key\n然后在博客根目录下测试连接：\nssh -T git@github.com 🔑 同样在 ~/.ssh 再生成一个密钥对，不过这次要生成 ed25519 类型的：\nssh-keygen -t ed25519 -C \u0026#34;hugo-deploy-key\u0026#34; -f ./hugo_deploy_key -N \u0026#34;\u0026#34; ➡️ 复制 .pub 的内容，到刚创建的 Public 仓库，点击 Settings \u0026gt; Deploy keys \u0026gt; Add deploy key，粘贴到 “Key” 下面的输入框，起一个 Title，比如：hugo-deploy-key，勾选“Allow write access”，最后点击“Add key”\n➡️ 复制私钥的内容（没有扩展名的文件），到到 Private 仓库的 Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret，粘贴到 Secret 下面的输入框，起一个 Name，比如：HUGO_DEPLOY_SECRET，最后点击 Add secret\n⚠️ 私钥要复制包括头尾两行的全部内容，粘贴的时候**后面多加一个空行**\n创建 GitHub Actions 工作流文件：\nmkdir -p .github/workflows touch .github/workflows/hugo.yaml 编辑 hugo.yaml，把下面内容粘贴进去（注意替换自己的信息）：\nname: Deploy to Public Repo on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: # Set timezone - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai # Checkout - name: Checkout private repo uses: actions/checkout@v4 with: submodules: recursive # fetch-depth: 0 # SSH - name: Setup SSH uses: webfactory/ssh-agent@v0.9.1 with: ssh-private-key: ${{ secrets.HUGO_DEPLOY_KEY }} # Set up Hugo - name: Set up Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;0.145.0\u0026#34; # 填你的hugo版本 # Build - name: Build Hugo site run: hugo # Deploy to the public repo via SSH - name: Deploy to public repository run: | rm -rf deploy-repo git clone --single-branch --branch main git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git deploy-repo cd deploy-repo rm -rf * cp -r ../public/* . git config user.email \u0026#34;example@gmail.com\u0026#34; git config user.name \u0026#34;username\u0026#34; git add . git commit -m \u0026#34;Auto deploy Hugo site $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push origin main 配置用户名和邮箱：\n# 注意替换自己的信息 git config user.email “example@gmail.com” git config user.name \u0026#34;username\u0026#34; # 默认使用main分支 git config --global init.defaultBranch main 关联 Private 仓库：\n# 查看配置 git remote add origin git@github.com:username/hugo-source-code.git Add, Commit, Push 三步走：\ngit add . git commit -m \u0026#34;First commit\u0026#34; git push -u origin main 最后到 Private 仓库的 Actions 界面看工作流是否 run 成功，成功之后在浏览器打开 username.github.io 即可查看博客页面 🔚\n参考 Hugo， PaperMod\n","permalink":"https://ninjagopher.github.io/posts/hugo-deploy/","summary":"GitHub Pages + GitHub Actions 自动部署 Hugo + PaperMod 博客","title":"Hugo 博客搭建和部署"},{"content":"","permalink":"https://ninjagopher.github.io/about/","summary":"about","title":""}]